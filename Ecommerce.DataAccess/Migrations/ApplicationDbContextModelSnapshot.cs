// <auto-generated />
using FirstProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecom.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecom.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("Ecom.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Billy Spark",
                            CategoryId = 1,
                            Description = "Praesent vitae sodales libero. Curabitur at pulvinar elit.",
                            ISBN = "SWD9999001",
                            ImageUrl = "",
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Title = "Fortune of Time"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Nancy Drew",
                            CategoryId = 1,
                            Description = "Etiam auctor, magna vel malesuada tempor, augue velit aliquet sapien.",
                            ISBN = "SWD9999002",
                            ImageUrl = "",
                            Price = 120.0,
                            Price100 = 100.0,
                            Price50 = 110.0,
                            Title = "The Silent Observer"
                        },
                        new
                        {
                            Id = 3,
                            Author = "James Walker",
                            CategoryId = 1,
                            Description = "Suspendisse potenti. Nullam ac nisi non sapien pulvinar faucibus.",
                            ISBN = "SWD9999003",
                            ImageUrl = "",
                            Price = 75.0,
                            Price100 = 65.0,
                            Price50 = 70.0,
                            Title = "Mystic River Tales"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Sara Connor",
                            CategoryId = 1,
                            Description = "Integer vel arcu nec augue dapibus fermentum a a ligula.",
                            ISBN = "SWD9999004",
                            ImageUrl = "",
                            Price = 150.0,
                            Price100 = 130.0,
                            Price50 = 140.0,
                            Title = "Digital Dreams"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Tony Stark",
                            CategoryId = 1,
                            Description = "Morbi accumsan metus at ipsum euismod, ac porta velit volutpat.",
                            ISBN = "SWD9999005",
                            ImageUrl = "",
                            Price = 200.0,
                            Price100 = 180.0,
                            Price50 = 190.0,
                            Title = "Echoes of Eternity"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Bruce Wayne",
                            CategoryId = 1,
                            Description = "Ut vehicula risus in ex blandit, ut facilisis ex luctus.",
                            ISBN = "SWD9999006",
                            ImageUrl = "",
                            Price = 110.0,
                            Price100 = 95.0,
                            Price50 = 100.0,
                            Title = "Code of Shadows"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Lara Craft",
                            CategoryId = 1,
                            Description = "Phasellus at dignissim augue. In nec tellus magna.",
                            ISBN = "SWD9999007",
                            ImageUrl = "",
                            Price = 85.0,
                            Price100 = 75.0,
                            Price50 = 80.0,
                            Title = "Journey to Nowhere"
                        });
                });

            modelBuilder.Entity("Ecom.Models.Product", b =>
                {
                    b.HasOne("Ecom.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
